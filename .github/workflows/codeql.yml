name: Secret Scanning with TruffleHog

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
permissions:  
   contents: read  
   security-events: write  # ‚úÖ Grant permission to upload SARIF  

jobs:
  scan-secrets:
    name: Scan for Secrets on Windows
    runs-on: windows-latest  # Windows runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Python and TruffleHog
        run: |
          # Install Python directly from the official website
          Invoke-WebRequest -Uri https://www.python.org/ftp/python/3.8.8/python-3.8.8-amd64.exe -OutFile python-installer.exe
          Start-Process -FilePath python-installer.exe -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          python --version

          # Install TruffleHog
          #pip install truffleHog3
          #pip install truffleHog3 --verbose
          pip install  --upgrade truffleHog3

      - name: Run TruffleHog Scan for Secrets
        run: |
          # Run TruffleHog and output the results in SARIF format
          #trufflehog3  ./ --output trufflehog_output.json || Write-Host "Secrets detected, but continuing workflow."
          trufflehog3 filesystem . --output trufflehog_output.json || Write-Host "Secrets detected, but continuing workflow."
          exit 0

      - name: Debug TruffleHog Output
        run: |
          echo "üîç Checking if TruffleHog found secrets..."
          Get-Content trufflehog_output.json

      - name: Debug TruffleHog Output
        shell: pwsh
        run: |
          if (Test-Path "trufflehog_output.json") {
            Write-Host "‚úÖ trufflehog_output.json found!"
            $content = Get-Content -Path trufflehog_output.json -Raw
            if ($content -eq "[]" -or $content -eq "") {
              Write-Host "‚ö†Ô∏è No secrets found by TruffleHog. Skipping SARIF conversion."
              exit 0
            }
            Write-Host "üîç TruffleHog detected secrets!"
          } else {
            Write-Host "‚ùå trufflehog_output.json NOT found!"
            exit 1
          }

      - name: Convert TruffleHog JSON to SARIF
        shell: pwsh
        run: |
          $content = @'
          import json
          import sys
          import os

          try:
              sys.stdout.reconfigure(encoding='utf-8')

              input_file = "trufflehog_output.json"
              output_file = "trufflehog_output.sarif"

              if not os.path.exists(input_file):
                  raise FileNotFoundError(f"‚ùå Input file '{input_file}' not found!")

              # Read JSON with error handling
              with open(input_file, "r", encoding="utf-8") as file:
                  raw_content = file.read().strip()

              # Ensure content is valid JSON
              if not raw_content or raw_content == "[]":
                  raise ValueError("‚ö†Ô∏è No valid findings in TruffleHog output. Skipping SARIF generation.")

              try:
                  data = json.loads(raw_content)
              except json.JSONDecodeError as e:
                  raise ValueError(f"‚ùå Invalid JSON format in TruffleHog output: {e}")

              if not isinstance(data, list) or len(data) == 0:
                  print("‚ö†Ô∏è No valid findings in TruffleHog output. Skipping SARIF generation.")
                  sys.exit(0)

              sarif = {
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {"driver": {"name": "TruffleHog"}},
                      "results": [
                          {
                              "message": {"text": f"Secret found in {item.get('path', 'unknown file')}"},
                              "locations": [{
                                  "physicalLocation": {
                                      "artifactLocation": {"uri": item.get("path", "unknown file")}
                                  }
                              }]
                          } for item in data if "path" in item
                      ]
                  }]
              }

              with open(output_file, "w", encoding="utf-8") as sf:
                  json.dump(sarif, sf, indent=2, ensure_ascii=False)

              print(f"‚úÖ SARIF file '{output_file}' created successfully!")

          except Exception as e:
              print(f"‚ùå Error converting to SARIF: {e}")
              exit(1)
          '@

          Set-Content -Path convert_to_sarif.py -Value $content -Encoding UTF8
          python convert_to_sarif.py

     
      - name: Debug SARIF Output
        shell: pwsh
        run: |
          if (Test-Path "trufflehog_output.sarif") {
            Write-Host "‚úÖ trufflehog_output.sarif generated successfully!"
            Get-Content trufflehog_output.sarif
          } else {
            Write-Host "‚ùå SARIF report NOT found!"
            exit 1
          }
      - name: Upload SARIF file to GitHub Code Scanning Alerts
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true
          
      - name: Debug SARIF File
        run: |
          echo "üîç Checking SARIF file before upload..."
          Get-Content trufflehog_output.sarif

